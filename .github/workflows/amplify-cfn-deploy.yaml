name: Amplify Gen 2 via CloudFormation

on:
  push: 
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  CI: "true"
  AWS_REGION: eu-west-3
  STACK_NAME: amplify-hosting-eldi
  BRANCH_NAME: ${{ github.ref_name }}
  PUBLIC_PREFIX: config/prod/

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure GitHub PAT secret exists in AWS
        id: sm
        shell: bash
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          SECRET_NAME: github/pat
        run: |
          set -euo pipefail
          if aws secretsmanager describe-secret --secret-id $SECRET_NAME >/dev/null 2>&1; then
            aws secretsmanager put-secret-value \
              --secret-id $SECRET_NAME \
              --secret-string "{\"token\":\"$GH_PAT\"}" >/dev/null
          else
            aws secretsmanager create-secret \
              --name $SECRET_NAME \
              --secret-string "{\"token\":\"$GH_PAT\"}" >/dev/null
          fi
          ARN=$(aws secretsmanager describe-secret --secret-id $SECRET_NAME --query ARN --output text)
          echo "arn=$ARN" >> "$GITHUB_OUTPUT"

      - name: Deploy CloudFormation (Amplify Hosting) Stack
        run: |
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file infra/amplify-hosting.yaml \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              RepoUrl=https://github.com/antonD24/ELDI-Dashboard \
              AppName=eldi-web \
              BranchName=${{ env.BRANCH_NAME }} \
              GithubSecretPATArn=${{ steps.sm.outputs.arn }} \
              AmplifyServiceRoleArn=${{ secrets.AWS_OIDC_ROLE_ARN }} \
              PublicPrefix=${{ env.PUBLIC_PREFIX }}

      - name: Get Stack Outputs
        id: cfn_outputs
        run: |
          APP_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='AppId'].OutputValue" --output text)
          echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
          BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='BucketNameOut'].OutputValue" --output text)
          echo "bucket_name=$BUCKET" >> $GITHUB_OUTPUT
          PublicPrefix=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='PublicPrefixOut'].OutputValue" --output text)
          echo "public_prefix=$PublicPrefix" >> $GITHUB_OUTPUT
          PublicUrl=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='PublicUrlPrefix'].OutputValue" --output text)
          echo "public_url=$PublicUrl" >> $GITHUB_OUTPUT

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci

      - name: Deploy Amplify back-end
        run: |
          export CI=1
          npx ampx pipeline-deploy \
            --appId "${{ steps.cfn_outputs.outputs.app_id }}" \
            --branch "${{ env.BRANCH_NAME }}"

      - name: Generate Amplfy Outputs
        run: |
          npx ampx generate outputs \
            --appId "${{ steps.cfn_outputs.outputs.app_id }}" \
            --branch "${{ env.BRANCH_NAME }}"

      - name: Upload Amplify Outputs to S3
        env:
          BUCKET_NAME: ${{ steps.cfn_outputs.outputs.bucket_name }}
          PUBLIC_PREFIX: ${{ steps.cfn_outputs.outputs.public_prefix }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws s3 cp amplify-outputs.json "s3://$BUCKET_NAME/$PUBLIC_PREFIX" \
            --region $AWS_REGION \
            --cache-control "no-cache, no-store, must-revalidate"
          echo "PUBLIC_URL=${{ steps.cfn_outputs.outputs.public_url }}" >> $GITHUB_ENV

      - name: Trigger Amplify front-end build
        run: |
          aws amplify start-job \
            --app-id "${{ steps.cfn_outputs.outputs.app_id }}" \
            --branch-name "${{ env.BRANCH_NAME }}" \
            --job-type RELEASE
            
      